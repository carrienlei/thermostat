			     EE 109  - Spring 2022
				  Thermometer


Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these thermometers.  Itemize the part costs (list each part and its
unit cost when bought in units of 1000) and then show the final cost per unit
below.  Note: You only need to price the components used in the project (not
all the components in your lab kit.  Also, you do not need to account for the
cost of the circuit board or wires. In a real environment we would manufacture
a PCB (Printed Circuit Board). As an optional task, you can search online for
PCB manufacturers and what the costs and options are in creating a PCB.

ITEM				UNIT COST			COST FOR 1000 UNITS
Arduino			23				23000
LCD Shield			9.9				9900
1 Red LED							110.24
1 Green LED							110.24
4 Resistors			(11.44 for 1000)		45.76
Integrated Circuit					264.25
Buzzer							477.97
Rotary Encoder						2344.2
Knob				1				1000
2 Buttons			(1.52 each if buying 	790 (500 4-packs)
					100+ items)
Servo Motor			(4.76 each if buying 	4760
					100+ items)
		
		
TOTAL FOR 1000 UNITS:		$42802.66
COST PER UNIT			$42.80


Review Question 2 (Health/Safety/Reliability)

Assume this system was to be sold to consumers for use at their home.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 

	One scenario I’d consider testing in terms of hardware before releasing the product 
	for use is to see if the temperature sensor can read a wider range of temperature values 
	(less than 50 or more than 90 degrees Fahrenheit) and ensure that the servo motor can 
	change accordingly. In terms of software, I’d want to test more cases where the input
	from the serial interface doesn’t follow the typical format of “ @,+,val,val,val, #” and 
	ensure that my code will still know to disregard these values. 



 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.

	To make my design more reliable hardware-wise, I would consider adding an additional 
	temperature sensor; this way if one fails, the system will still work. Additionally, I’d 
	want to mount the servo onto the LCD panel rather than having it be a long hanging piece; 
	this way, the design is more compact and less likely to become tangled with other components. 
	Lastly, I would want to find some way to design this on a PCB because currently, the wires can 
	easily become detached if I were to drop the system. With the PCB, it will be much neater. In 
	terms of software, I would want to be able to quickly find the error should one occur, and I 
	can achieve this by including more debugging statements (i.e. printing out ‘this part x is not
	working’) to find and handle errors more efficiently. 






